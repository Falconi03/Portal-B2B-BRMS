@import 'mixins/background-gradient';
@import 'mixins/clearfix';
@import 'mixins/fontawesome';
@import 'mixins/gradient-enabled';
@import 'mixins/helper-color';
@import 'mixins/helper-font-size';
@import 'mixins/helper-font-weight';
@import 'mixins/helper-opacity';
@import 'mixins/helper-row-space';
@import 'mixins/helper-size';
@import 'mixins/helper-spacing';



@mixin font-size($sizeValue: 1.6) {
    font-size: ($sizeValue * 10) + px;
    font-size: $sizeValue + rem;
}

@mixin button-variant($color, $background, $border) {
    color: $color;
    background-color: $background;
    border-color: $border;
  
    &:focus,
    &.focus {
      color: $color;
      background-color: darken($background, 10%);
      border-color: darken($border, 25%);
    }
    &:hover {
      color: $color;
      background-color: darken($background, 10%);
      border-color: darken($border, 12%);
    }
    &:active,
    &.active,
    .open > &.dropdown-toggle {
      color: $color;
      background-color: darken($background, 10%);
      background-image: none;
      border-color: darken($border, 12%);
  
      &:hover,
      &:focus,
      &.focus {
        color: $color;
        background-color: darken($background, 17%);
        border-color: darken($border, 25%);
      }
    }
    &.disabled,
    &[disabled],
    fieldset[disabled] & {
      &:hover,
      &:focus,
      &.focus {
        background-color: $background;
        border-color: $border;
      }
    }
  
    .badge {
      color: $background;
      background-color: $color;
    }
  }
  
  // Button sizes
  @mixin button-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
    padding: $padding-vertical $padding-horizontal;
    font-size: $font-size;
    line-height: $line-height;
    border-radius: $border-radius;
  }

// scss-docs-start border-radius-mixins
@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {
    @if $enable-rounded {
        border-radius: valid-radius($radius);
    }
    @else if $fallback-border-radius !=false {
        border-radius: $fallback-border-radius;
    }
}

@mixin border-top-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-top-left-radius: valid-radius($radius);
        border-top-right-radius: valid-radius($radius);
    }
}

@mixin border-end-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-top-right-radius: valid-radius($radius);
        border-bottom-right-radius: valid-radius($radius);
    }
}

@mixin border-bottom-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-bottom-right-radius: valid-radius($radius);
        border-bottom-left-radius: valid-radius($radius);
    }
}

@mixin border-start-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-top-left-radius: valid-radius($radius);
        border-bottom-left-radius: valid-radius($radius);
    }
}

@mixin border-top-start-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-top-left-radius: valid-radius($radius);
    }
}

@mixin border-top-end-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-top-right-radius: valid-radius($radius);
    }
}

@mixin border-bottom-end-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-bottom-right-radius: valid-radius($radius);
    }
}

@mixin border-bottom-start-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-bottom-left-radius: valid-radius($radius);
    }
}

@mixin box-shadow($shadow...) {
    @if $enable-shadows {
        $result: ();
        @each $value in $shadow {
            @if $value !=null {
                $result: append($result, $value, "comma");
            }
            @if $value==none and length($shadow)>1 {
                @warn "The keyword 'none' must be used as a single argument.";
            }
        }
        @if (length($result) > 0) {
            box-shadow: $result;
        }
    }
}

// stylelint-disable property-disallowed-list
@mixin transition($transition...) {
    @if length($transition)==0 {
        $transition: $transition-base;
    }
    @if length($transition)>1 {
        @each $value in $transition {
            @if $value==null or $value==none {
                @warn "The keyword 'none' or 'null' must be used as a single argument.";
            }
        }
    }
    @if $enable-transitions {
        @if nth($transition, 1) !=null {
            transition: $transition;
        }
        @if $enable-reduced-motion and nth($transition, 1) !=null and nth($transition, 1) !=none {
            @media (prefers-reduced-motion: reduce) {
                transition: none;
            }
        }
    }
}

@mixin display-flex() {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
}

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.
// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @if not $n {
        @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
    }
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min !=0, $min, null);
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $max: map-get($breakpoints, $name);
    @return if($max and $max > 0, $max - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints)==null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    }
    @else {
        @content;
    }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    }
    @else {
        @content;
    }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($lower, $breakpoints);
    $max: breakpoint-max($upper, $breakpoints);
    @if $min !=null and $max !=null {
        @media (min-width: $min) and (max-width: $max) {
            @content;
        }
    }
    @else if $max==null {
        @include media-breakpoint-up($lower, $breakpoints) {
            @content;
        }
    }
    @else if $min==null {
        @include media-breakpoint-down($upper, $breakpoints) {
            @content;
        }
    }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    $next: breakpoint-next($name, $breakpoints);
    $max: breakpoint-max($next);
    @if $min !=null and $max !=null {
        @media (min-width: $min) and (max-width: $max) {
            @content;
        }
    }
    @else if $max==null {
        @include media-breakpoint-up($name, $breakpoints) {
            @content;
        }
    }
    @else if $min==null {
        @include media-breakpoint-down($next, $breakpoints) {
            @content;
        }
    }
}

@mixin flex-justify-content($variable) {
    -webkit-box-pack: $variable;
    -ms-flex-pack: $variable;
    justify-content: $variable;
}

.header {
    z-index: $app-header-zindex;
    background: $black;
    .app-header {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
    }
    .app-header b {
        color: $white;
    }
    .navbar-header {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        align-items: center;
    }
    .navbar-nav {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        align-items: center;
        color: $white;
    }
    .navbar-nav li {
        padding: 20px;
    }
}